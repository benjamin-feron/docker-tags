#!/bin/bash

show_help () {
  echo \
"Usage: docker-tags [OPTIONS] <REPOSITORY>
Retrieve tag list of a Docker repository.

REPOSITORY: Name of repository.

OPTIONS:
  -f, --filter=FILTER
         Filter tags names.
  -h, --hide-pagination
         Don't show pagination.
  -p, --page-size
         Number of tags per page. Due to Docker registry API limitation, maximum value is 100.
         Default is 100.
  -c, --page-count
         Number of pages to retrieve.
         Default is unlimited.
  -s, --sort=WORD
         Sort tags by WORD. Possible values for WORD are 'last_updated', '-last_updated', 'name' or '-name'.
         Default is 'last_updated'.
  --help
         Show help.

Examples: docker-tags ubuntu/bind9
          docker-tags -hs name php"
}

DOCKER_BASE_URL="https://hub.docker.com"

FILTER=""
HIDE_PAGES=0
PAGE_SIZE=100
PAGE_COUNT=0
SORT=last_updated

# Add support for CTRL+C
exit_func() {
  exit 1
}
trap exit_func SIGTERM SIGINT

options=$(getopt -o c:f:hp:s: -l filter:,hide-pagination,page-count:,page-size:,sort:,help -- "$@")
eval set -- "$options"
while true; do
  case "$1" in
    -c|--page-count)
      PAGE_COUNT=$2
      shift 2
      ;;
    -f|--filter)
      FILTER="$2"
      shift 2
      ;;
    -h|--hide-pagination)
      HIDE_PAGES=1
      shift
      ;;
    -p|--page-size)
      PAGE_SIZE=$2
      shift 2
      ;;
    -s|--sort)
      SORT="$2"
      shift 2
      ;;
    --help)
      show_help
      exit
      ;;
    --)
      shift
      break
      ;;
  esac
done

REPO="$1"
shift

throw_error () {
  MSG=$1
  STD_MSG="Command stopped"
  printf "\033[0;31mError: $MSG\033[0m\n"
  echo "$STD_MSG"
  exit 1
}

# Requirements
command -v curl >/dev/null 2>&1 || throw_error "curl is not installed. Aborting."
command -v jq >/dev/null 2>&1 || throw_error "jq is not installed. Aborting."

# Command arguments checks
[ -z $REPO ] && show_help && throw_error "Please specify a repository name (ie. docker-tags php)."
[ -z "${PAGE_SIZE##*[!0-9]*}" ] && show_help && throw_error "Page size must be a positive integer."
[ $PAGE_SIZE -gt 100 ] && show_help && throw_error "Page size must be lower than 100."
[ -z "${PAGE_COUNT##*[!0-9]*}" ] && show_help && throw_error "Page count must be a positive integer."
[ "$SORT" != "last_updated" ] && [ "$SORT" != "-last_updated" ] && [ "$SORT" != "name" ] && [ "$SORT" != "-name" ] && show_help && throw_error "Bad sort value."

# Prefix repository name with "library/" if does not contain "/"
[[ ! "$REPO" =~ "/" ]] && REPO="library/$REPO"

# Construct API URL
url="$DOCKER_BASE_URL/v2/repositories/$REPO/tags"

# Construct ordering
[ "$SORT" != "" ] && ordering="&ordering=$SORT" || ordering=""

# Construct filter
[ "$FILTER" != "" ] && filter="&name=$FILTER" || filter=""
&
# Get tags count
tags_count=$(curl "$url/?page=1&page_size=1" 2>/dev/null | jq '."count"')

# Calculate page count
page_count=$(((tags_count / PAGE_SIZE) + (tags_count % PAGE_SIZE > 0)))

# Loop through pages
for (( i=1; i<=$page_count; i++ )); do
  [ $HIDE_PAGES -eq 0 ] && echo "- Page $i/$page_count -"
  echo "$(curl "$url/?page=$i&page_size=$PAGE_SIZE$ordering$filter" 2>/dev/null | jq -r '."results"[]["name"]')"
  [ $PAGE_COUNT -gt 0 ] && [ $PAGE_COUNT -eq $i ] && break
done
