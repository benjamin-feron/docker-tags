#!/bin/bash

show_help () {
  echo \
"Usage: docker-tags [OPTIONS] <REPOSITORY>
Retrieve tag list of a Docker repository.

REPOSITORY: Name of repository.

OPTIONS:
  -f, --filter=FILTER
         Filter tags names.
  -p, --pagination
         Show pagination.
  -P, --page-size
         Number of tags per page. Due to Docker registry API limitation, maximum value is 100.
         Default is 100.
  -c, --page-count
         Number of pages to retrieve.
         Default is unlimited.
  -s, --sort=WORD
         Sort tags by WORD. Possible values for WORD are 'last_updated', '-last_updated', 'name', '-name', 'version' or '-version'.
         Default is 'last_updated'.
  -h, --help
         Show help.

Examples: docker-tags ubuntu/bind9
          docker-tags -pc 2 -s name php"
}

REGISTRY_URL="https://hub.docker.com"

FILTER=""
PAGINATION=0
PAGE_SIZE=100
PAGE_COUNT=0
SORT=last_updated

SORT_ALLOWED=("last_updated" "-last_updated" "name" "-name" "version" "-version")

# Add support for CTRL+C
exit_func() {
  exit 1
}
trap exit_func SIGTERM SIGINT

options=$(getopt -o c:f:pP:s:h -l filter:,pagination,page-count:,page-size:,sort:,help -- "$@")
eval set -- "$options"
while true; do
  case "$1" in
    -c|--page-count)
      PAGE_COUNT=$2
      shift 2
      ;;
    -f|--filter)
      FILTER="$2"
      shift 2
      ;;
    -p|--pagination)
      PAGINATION=1
      shift
      ;;
    -P|--page-size)
      PAGE_SIZE=$2
      shift 2
      ;;
    -s|--sort)
      SORT="$2"
      shift 2
      ;;
    -h|--help)
      show_help
      exit
      ;;
    --)
      shift
      break
      ;;
  esac
done

REPO="$1"
shift

throw_error () {
  MSG=$1
  STD_MSG="Command stopped"
  printf "\033[0;31mError: %s\033[0m\n" "$MSG"
  echo "$STD_MSG"
  exit 1
}

# Requirements
command -v curl >/dev/null 2>&1 || throw_error "curl is not installed. Aborting."
command -v jq >/dev/null 2>&1 || throw_error "jq is not installed. Aborting."

# Command arguments checks
[ -z "$REPO" ] && show_help && throw_error "Please specify a repository name (ie. docker-tags php)."
[ -z "${PAGE_SIZE##*[!0-9]*}" ] && show_help && throw_error "Page size must be a positive integer."
(( PAGE_SIZE > 100 )) && show_help && throw_error "Page size must be lower than 100."
[ -z "${PAGE_COUNT##*[!0-9]*}" ] && show_help && throw_error "Page count must be a positive integer."
[[ ! ${SORT_ALLOWED[*]} =~ $SORT ]] && show_help && throw_error "Bad sort value"
if [[ "$SORT" == "version" || "$SORT" == "-version" ]] && [ $PAGINATION -eq 1 ]; then show_help && throw_error "When sort option is \"version\" or \"-version\", pagination couldn't be activated."; fi

# Command arguments adjust
if [[ "$SORT" == "version" || "$SORT" == "-version" ]]; then
  if (( PAGE_COUNT == 0 )); then
    PAGE_COUNT=3
  fi
fi

# Prefix repository name with "library/" if does not contain "/"
[[ ! "$REPO" =~ "/" ]] && REPO="library/$REPO"

# Construct API URL
url="$REGISTRY_URL/v2/repositories/$REPO/tags"

# Construct ordering
ordering=""
if [ "$SORT" != "" ]; then
  case "$SORT" in
    version)
      ordering="&ordering=name"
      ;;
    -version)
      ordering="&ordering=-name"
      ;;
    *)
      ordering="&ordering=$SORT"
      ;;
  esac
fi

# Construct filter
filter=""
[ "$FILTER" != "" ] && filter="&name=$FILTER"

# Get tags count
tags_count=$((PAGE_SIZE * 3))
if [[ "$SORT" != "version" && "$SORT" != "-version" ]]; then
  echo "Get tags count..."
  tags_count=$(curl "$url/?page=1&page_size=1" 2>/dev/null | jq '."count"')
fi

# Calculate page count
page_count=$(((tags_count / PAGE_SIZE) + (tags_count % PAGE_SIZE > 0)))

# Loop through pages
allTags=""
for (( i=1; i<=page_count; i++ )); do
  if [[ "$SORT" != "version" && "$SORT" != "-version" ]]; then
    [ $PAGINATION -eq 1 ] && echo "- Page $i/$page_count -"
  elif (( i == 1 )); then
    echo "Get first $tags_count tags..."
  fi
  tags="$(curl "$url/?page=$i&page_size=$PAGE_SIZE$ordering$filter" 2>/dev/null | jq -r '."results"[]?["name"]')"
  if [ "$tags" != "" ]; then
    if [[ "$SORT" != "version" && "$SORT" != "-version" ]]; then
      echo "$tags"
    fi
    allTags="$allTags$tags"
  fi
  (( PAGE_COUNT > 0 )) && (( PAGE_COUNT == i )) && break
done

# Sort by version number
if [[ "$SORT" == "version" || "$SORT" == "-version" ]]; then
  echo "$allTags" | paste -sd "," - | sed -e 's;[ |,];\n;g' | sort -rV
fi